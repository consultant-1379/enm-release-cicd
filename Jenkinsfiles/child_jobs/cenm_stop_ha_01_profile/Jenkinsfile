def commonMethods

pipeline {
    agent {
        node {
            label SLAVE
        }
    }
    options {
        timestamps()
    }
    stages {
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkinsfiles/common_methods/CommonMethods.groovy")
                }
            }
        }

        stage('Writing Parameters to parameters.properties') {
            steps {
                script {
                    commonMethods.exportEnvVariablesToFile("parameters.properties")
                }
            }
        }

        stage('Downloading MT Utils Pipeline Scripts') {
            steps {
                script {
                    commonMethods.downloadMtUtils()
                }
            }
        }

        stage('Execute EMT Pipeline script') {
            steps{
              sh "MTELoopScripts/pipeline_scripts/emt/jenkins/intermediate_build_setup.sh ${WORKSPACE}/parameters.properties initial || exit 1"
            }
        }

        stage('Triggers the HA_01 workload Profile') {
            steps{
                sh '''
                        echo "setup_phase=stop_ha_01" >> ${WORKSPACE}/parameters.properties
                        sh MTELoopScripts/pipeline_scripts/cenm_start_stop_ha_01_profile_setup.sh ${WORKSPACE}/parameters.properties || exit 1
                '''
            }
        }

        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.description = "<b>Test Phase = ${test_phase}<br>Cluster ID = ${cluster_id}</b>"
                }
            }
        }
    }

    post {
        always {
            script {
                sh '''
                    echo "setup_phase=post_build" >> ${WORKSPACE}/parameters.properties
                '''
                sh "MTELoopScripts/pipeline_scripts/emt/jenkins/intermediate_build_setup.sh ${WORKSPACE}/parameters.properties post_build || exit 1"
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}