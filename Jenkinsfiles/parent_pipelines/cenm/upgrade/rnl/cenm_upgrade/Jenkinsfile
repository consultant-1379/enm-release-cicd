import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {

        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Upgrade on ${cluster_id}"
                    currentBuild.description = "<b>Drop = ${drop}<br>Product Set Version = ${cenm_product_set_version}</b>"
                }
            }
        }

        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkinsfiles/common_methods/CommonMethods.groovy")
                }
            }
        }

        stage('Writing Parameters to parameters.properties') {
            steps {
                script {
                    commonMethods.exportEnvVariablesToFile("parameters.properties")
                }
            }
        }

        stage('Downloading MT Utils Pipeline Scripts') {
            steps {
                script {
                    commonMethods.downloadMtUtils()
                }
            }
        }

        stage('Execute EMT Deployment State Change Script') {
            steps{
              sh "MTELoopScripts/pipeline_scripts/emt/emt_deployment_state_change.sh ${WORKSPACE}/parameters.properties || exit 1"
            }
        }

        stage('Storing Job Details in Slave') {
            steps {
                script {
                    def node_name = "${SLAVE}"
                    def date = new Date()
                    sh " echo \" NODE_NAME : ${env.NODE_NAME} ; JOB_NAME : ${env.JOB_NAME} ; BUILD_NUMBER : ${env.BUILD_NUMBER} ; $date \" >> \"/home/lciadm100/jenkins/job_details.log\" "
                }
            }
        }

        stage('Execute EMT Pipeline script') {
            steps{
              sh "MTELoopScripts/pipeline_scripts/emt/jenkins/intermediate_build_setup.sh ${WORKSPACE}/parameters.properties initial || exit 1"
            }
        }

        stage('cENM Send Confidence Level') {
            steps {
                setConfidenceLevelToSend('in_progress');
            }
        }

        stage('Resolve enm_iso_version mapped to Product Set') {
            steps {
                sh "sh MTELoopScripts/pipeline_scripts/retrieve_enm_iso_version.sh ${WORKSPACE}/parameters.properties || exit 1"
            }
        }

        stage('RNL cENM Upgrade') {
            when {
                expression {
                    env.is_dit_versioning_applied == "False"
                }
            }
            steps {
                script {
                    if (checkJobBuildable("cENM_Upgrade")) {
                        def Cenm_Upgrade = build(
                            job: "cENM_Upgrade",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'deployment_mechanism', value: 'csar'),
                                string(name: 'integration_value_type', value: 'eric-enm-integration-production-values'),
                                string(name: 'environment_name', value: env.cluster_id),
                                string(name: 'stage_area', value: 'ci_internal'),
                                string(name: 'product_set_version', value: env.cenm_product_set_version),
                                string(name: 'backup_name', value: env.backup_name),
                                string(name: 'drop', value: env.drop),
                            ]
                        )
                    } else {
                        echo "cENM_Upgrade Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('RNL New cENM Upgrade') {
            when {
                expression {
                    env.is_dit_versioning_applied == "True"
                }
            }
            steps {
                script {
                    if (checkJobBuildable("cENM_Upgrade_New")) {
                        def Cenm_Upgrade = build(
                            job: "cENM_Upgrade_New",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'use_case', value: 'Upgrade'),
                                string(name: 'Artifact_type', value: env.Artifact_type),
                                string(name: 'deployment_size', value: env.deployment_size),
                                string(name: 'orchestration_type', value: env.orchestration_type),
                                string(name: 'container_registry_type', value: env.container_registry_type),
                                string(name: 'environment_name', value: env.cluster_id),
                                string(name: 'product_set_version', value: env.cenm_product_set_version),
                                string(name: 'backup_name', value: env.backup_name),
                                string(name: 'scope', value: env.scope),
                            ]
                        )
                    } else {
                        echo "cENM_Upgrade_New Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('Archive artifacts') {
            steps{
                archiveArtifacts artifacts: 'artifact.properties'
            }
        }
    }

    post {
        success {
            setConfidenceLevelToSend('passed');
        }
        failure {
            setConfidenceLevelToSend('failed');
        }
        aborted {
            setConfidenceLevelToSend('failed');
        }
        always {
            script {
                sh "MTELoopScripts/pipeline_scripts/emt/jenkins/intermediate_build_setup.sh ${WORKSPACE}/parameters.properties post_build || exit 1"
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}

def setConfidenceLevelToSend(confidence_level_status) {
    script {
        if (env.send_confidence_level == 'YES') {
            if (checkJobBuildable("cENM_Send_Confidence_Level")) {
                def Cenm_Send_Confidence_Level = build(
                    job: "cENM_Send_Confidence_Level",
                    propagate: false,
                    wait: false,
                    parameters: [
                        string(name: 'product_set_version', value: env.cenm_product_set_version),
                        string(name: 'confidence_level_name', value: 'cENM-Deploy-UG-CSAR'),
                        string(name: 'confidence_level_status', value: confidence_level_status),
                        string(name: 'mt_utils_version', value: env.mt_utils_version),
                    ]
                )
            } else {
                echo "cENM_Send_Confidence_Level Job is disabled. So skipping"
            }
        }
    }
}