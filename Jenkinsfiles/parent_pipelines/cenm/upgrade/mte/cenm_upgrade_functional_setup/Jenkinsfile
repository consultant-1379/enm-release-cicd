import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {
        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Deployment Setup on ${cluster_id}"
                    currentBuild.description = "<b>MT Utils Version = ${mt_utils_version}<br>Tor Utils Version = ${tor_utils_version}<br>APT Version = ${apt_version}<br>Product Set Version = ${product_set_version}</b>"
                }
            }
        }

        stage('Storing Job Details in Slave') {
            steps {
                script {
                    def node_name = "${SLAVE}"
                    def date = new Date()
                    sh " echo \" NODE_NAME : ${env.NODE_NAME} ; JOB_NAME : ${env.JOB_NAME} ; BUILD_NUMBER : ${env.BUILD_NUMBER} ; $date \" >> \"/home/lciadm100/jenkins/job_details.log\" "
                }
            }
        }

        stage('cENM Copy Utils Repo To Environment') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Copy_Utils_Repo_To_Environment")) {
                        def Cenm_Copy_Utils_Repo_To_Environment = build(
                            job: "cENM_Copy_Utils_Repo_To_Environment",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                            ]
                        )
                    } else {
                        echo "cENM_Copy_Utils_Repo_To_Environment Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Setup DDC') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Setup_DDC")) {
                        def Cenm_Setup_DDC = build(
                            job: "cENM_Setup_DDC",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'test_phase', value: env.test_phase),
                            ]
                        )
                    } else {
                        echo "cENM_Setup_DDC Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Deploy Tor Utilities Internal') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Deploy_Tor_Utilities_Internal")) {
                        def Cenm_Deploy_Tor_Utilities_Internal = build(
                            job: "cENM_Deploy_Tor_Utilities_Internal",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'tor_utils_version', value: env.tor_utils_version),
                                string(name: 'product_set_version', value: env.product_set_version),
                                string(name: 'test_phase', value: env.test_phase),
                            ]
                        )
                    } else {
                        echo "cENM_Deploy_Tor_Utilities_Internal Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Deploy NSS Testware Utilities') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Deploy_NSS_Testware_Utilities")) {
                        def Cenm_Deploy_NSS_Testware_Utilities = build(
                            job: "cENM_Deploy_NSS_Testware_Utilities",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'test_phase', value: env.test_phase),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'nss_utils_version', value: env.nss_utils_version),
                                string(name: 'product_set_version', value: env.product_set_version),
                            ]
                        )
                    } else {
                        echo "cENM_Deploy_NSS_Testware_Utilities Job is disabled. So skipping"
                    }
                }
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}
