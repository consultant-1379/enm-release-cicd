import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {
        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Functional acceptance tests on ${cluster_id}"
                    currentBuild.description = "<b>Product Set Version = ${product_set_version}<br>cENM Product Set Version = ${cenm_product_set_version}<br>MT Utils Version = ${mt_utils_version}</b>"
                }
            }
        }

        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkinsfiles/common_methods/CommonMethods.groovy")
                }
            }
        }

        stage('Writing Parameters to parameters.properties') {
            steps {
                script {
                    commonMethods.exportEnvVariablesToFile("parameters.properties")
                }
            }
        }

        stage('Downloading MT Utils Pipeline Scripts') {
            steps {
                script {
                    commonMethods.downloadMtUtils()
                }
            }
        }

        stage('Storing Job Details in Slave') {
            steps {
                script {
                    def node_name = "${SLAVE}"
                    def date = new Date()
                    sh " echo \" NODE_NAME : ${env.NODE_NAME} ; JOB_NAME : ${env.JOB_NAME} ; BUILD_NUMBER : ${env.BUILD_NUMBER} ; $date \" >> \"/home/lciadm100/jenkins/job_details.log\" "
                }
            }
        }

        stage('Execute EMT Pipeline script') {
            steps{
              sh "MTELoopScripts/pipeline_scripts/emt/jenkins/final_build_setup.sh ${WORKSPACE}/parameters.properties initial || exit 1"
            }
        }

        stage('cENM RFA250 Cleanup') {
            steps {
                script {
                    if (checkJobBuildable("cENM_RFA250_Cleanup")) {
                        def Cenm_RFA250_Cleanup = build(
                            job: "cENM_RFA250_Cleanup",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'product_set_version', value: env.product_set_version),
                                string(name: 'test_phase', value: env.test_phase),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'trigger_non_functional_flow', value: env.trigger_non_functional_flow),
                            ]
                        )
                    } else {
                        echo "cENM_RFA250_Cleanup Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Send Confidence Level to Build log for cENM RFA250 Rerunner') {
            steps {
                setConfidenceLevelToSendToBuildLog('cENM-RFA-Rerunner', 'in_progress', 'in_progress','update', '', '');
            }
        }

        stage('cENM RFA250 Rerunner') {
            steps {
                script {
                    def Cenm_RFA250_Rerunner
                    catchError {
                        if (checkJobBuildable("cENM_RFA250_Rerunner")) {
                            Cenm_RFA250_Rerunner = build(
                                job: "cENM_RFA250_Rerunner",
                                propagate: false,
                                wait: true,
                                parameters: [
                                    string(name: 'allure_report_url', value: env.allure_report_url),
                                    string(name: 'cluster_id', value: env.cluster_id),
                                    string(name: 'drop', value: env.drop),
                                    string(name: 'product_set_version', value: env.product_set_version),
                                    string(name: 'cenm_product_set_version', value: env.cenm_product_set_version),
                                    string(name: 'mt_utils_version', value: env.mt_utils_version),
                                    string(name: 'test_phase', value: env.test_phase),
                                    string(name: 'central_csv_version', value: env.central_csv_version),
                                    string(name: 'taf_version', value: env.taf_version),
                                    string(name: 'send_confidence_level', value: env.send_confidence_level),
                                ]
                            )
                            env.rerunner_job_link = Cenm_RFA250_Rerunner.absoluteUrl
                            env.console_output_url = sh(script: 'echo "Job Link is: ${rerunner_job_link}"', returnStdout: true)
                            env.rfa250RerunnerBuildVariables = Cenm_RFA250_Rerunner.getBuildVariables()
                            env.rerunnerAllureLogUrl = sh(script: 'echo "${rfa250RerunnerBuildVariables}" | tr "," "\n" | grep "TE_ALLURE_LOG_URL" | xargs | cut -d "=" -f 2', returnStdout: true)
                            if (Cenm_RFA250_Rerunner.result != "SUCCESS") {
                                echo "ERROR : cENM_RFA250_Rerunner failed. Failing the build!"
                                setConfidenceLevelToSendToBuildLog('cENM-RFA-Rerunner', 'in_progress', 'failed','update', env.rerunner_job_link, env.rerunnerAllureLogUrl);
                                currentBuild.result = 'FAILURE'
                            } else {
                                setConfidenceLevelToSendToBuildLog('cENM-RFA-Rerunner', 'in_progress', 'passed','update', env.rerunner_job_link, env.rerunnerAllureLogUrl);
                            }
                        } else {
                            echo "cENM_RFA250_Rerunner Job is disabled. So skipping"
                        }
                    }
                }
            }
        }

        stage('cENM RFA250 LCS log collection') {
            steps {
                script {
                    if (checkJobBuildable("cENM_RFA_250_LCS_log_collection")) {
                        def CENM_RFA_250_LCS_log_collection = build(
                            job: "cENM_RFA_250_LCS_log_collection",
                            propagate: false,
                            wait: true,
                            parameters: [
                                string(name: 'drop', value: env.drop),
                                string(name: 'cenm_product_set_version', value: env.cenm_product_set_version),
                                string(name: 'product_set_version', value: env.product_set_version),
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'test_phase', value: env.test_phase),
                                string(name: 'allure_report_url', value: env.allure_report_url),
                                string(name: 'mt_utils_version', value: env.mt_utils_version)
                            ]
                        )
                    } else {
                        echo "cENM_RFA250_LCS_Log_COllection Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM RFA250 Post Rerunner Cleanup') {
            steps {
                script {
                    if (checkJobBuildable("cENM_RFA250_Cleanup")) {
                        def Cenm_RFA250_Cleanup = build(
                            job: "cENM_RFA250_Cleanup",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'product_set_version', value: env.product_set_version),
                                string(name: 'test_phase', value: env.test_phase),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                            ]
                        )
                    } else {
                        echo "cENM_RFA250_Cleanup Job is disabled. So skipping"
                    }
                }
            }
        }

    }

    post {
        aborted {
            setConfidenceLevelToSendToBuildLog('cENM-RFA-Rerunner', 'in_progress', 'failed','update', '', '');
        }
        always  {
            script  {
                catchError  {
                    if (checkJobBuildable("cENM_Push_Data_To_DDP")) {
                        def Cenm_Push_Data_To_DDP = build(
                            job: "cENM_Push_Data_To_DDP",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'test_phase', value: env.test_phase),
                                string(name: 'trigger_non_functional_flow', value: env.trigger_non_functional_flow),
                            ]
                        )
                    } else  {
                        echo "cENM_Push_Data_To_DDP Job is disabled. So skipping"
                    }
                }
                sh "MTELoopScripts/pipeline_scripts/emt/jenkins/final_build_setup.sh ${WORKSPACE}/parameters.properties post_build || exit 1"
            }
        }
    }
}

def setConfidenceLevelToSendToBuildLog(confidence_level, overall_status, confidence_level_status, build_action, job_link, allure_link) {
    script {
        if (env.publish_to_buildlog == 'YES') {
            if (checkJobBuildable("cENM_Send_Confidence_Level_To_Build_Log")) {
                def Cenm_Send_Confidence_Level_To_Build_Log = build(
                    job: "cENM_Send_Confidence_Level_To_Build_Log",
                    propagate: false,
                    wait: false,
                    parameters: [
                        string(name: 'drop', value: env.drop),
                        string(name: 'to_ps', value: env.cenm_product_set_version),
                        string(name: 'build_log_action', value: build_action),
                        string(name: 'usecase_status', value: overall_status),
                        string(name: 'deployment', value: env.cluster_id),
                        string(name: 'test_phase', value: 'DROPBACK'),
                        string(name: 'usecase', value: 'cENM-Deploy-UG-CSAR'),
                        string(name: 'confidence_level', value: confidence_level),
                        string(name: 'job_link', value: job_link ),
                        string(name: 'allure_link', value: allure_link ),
                        string(name: 'status', value: confidence_level_status),
                        string(name: 'timestamp', value: ''),
                        string(name: 'mt_utils_version', value: env.mt_utils_version)
                    ]
                )
            } else {
                echo "cENM_Send_Confidence_Level_To_Build_Log Job is disabled. So skipping"
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}
