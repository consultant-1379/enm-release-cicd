import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {
        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Non Functional Deployment Setup on ${cluster_id}"
                    currentBuild.description = "<b>MT Utils Version = ${mt_utils_version}<br>APT Version = ${apt_version}<br>Product Set Version = ${product_set_version}</b>"
                }
            }
        }

        stage('Storing Job Details in Slave') {
            steps {
                script {
                    def node_name = "${SLAVE}"
                    def date = new Date()
                    sh " echo \" NODE_NAME : ${env.NODE_NAME} ; JOB_NAME : ${env.JOB_NAME} ; BUILD_NUMBER : ${env.BUILD_NUMBER} ; $date \" >> \"/home/lciadm100/jenkins/job_details.log\" "
                }
            }
        }

        stage('cENM Send Confidence Level') {
            steps {
                setConfidenceLevelToSend('in_progress');
            }
        }

        stage('cENM Deploy APT') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Deploy_APT_Tool")) {
                        def Cenm_Deploy_APT_Tool = build(
                            job: "cENM_Deploy_APT_Tool",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'test_phase', value: env.test_phase),
                                string(name: 'product_set_version', value: env.product_set_version),
                                string(name: 'apt_version', value: env.apt_version),
                            ]
                        )
                    } else {
                        echo "cENM_Deploy_APT_Tool Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Check Latest Time In DDP') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Check_Latest_Time_In_DDP")) {
                        def Cenm_Check_Latest_Time_In_DDP = build(
                            job: "cENM_Check_Latest_Time_In_DDP",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'test_phase', value: env.test_phase),
                                string(name: 'drop', value: env.drop),
                                string(name: 'product_set_version', value: env.product_set_version),
                                string(name: 'ddp_upload_timeout_seconds', value: env.ddp_upload_timeout_seconds),
                                string(name: 'trigger_non_functional_flow', value: env.trigger_non_functional_flow),
                                string(name: 'start_time', value: env.start_time),
                                string(name: 'end_time', value: env.end_time),
                            ]
                        )
                    } else {
                        echo "cENM_Check_Latest_Time_In_DDP Job is disabled. So skipping"
                    }
                }
            }
        }
    }

    post {
        success {
            setConfidenceLevelToSend('passed');
        }
        failure {
            setConfidenceLevelToSend('failed');
        }
        aborted {
            setConfidenceLevelToSend('failed');
        }
    }
}

def setConfidenceLevelToSend(confidence_level_status) {
    script {
        if (env.send_confidence_level == 'YES') {
            if (checkJobBuildable("cENM_Send_Confidence_Level")) {
                def Cenm_Send_Confidence_Level = build(
                    job: "cENM_Send_Confidence_Level",
                    propagate: false,
                    wait: false,
                    parameters: [
                        string(name: 'product_set_version', value: env.cenm_product_set_version),
                        string(name: 'confidence_level_name', value: 'cENM-Deploy-UG-Charts'),
                        string(name: 'confidence_level_status', value: confidence_level_status),
                        string(name: 'mt_utils_version', value: env.mt_utils_version),
                    ]
                )
            } else {
                echo "cENM_Send_Confidence_Level Job is disabled. So skipping"
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}
