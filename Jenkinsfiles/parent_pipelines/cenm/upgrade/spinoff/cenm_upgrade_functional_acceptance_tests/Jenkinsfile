import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {
        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Functional acceptance tests on ${cluster_id}"
                    currentBuild.description = "<b>Product Set Version = ${product_set_version}<br>cENM Product Set Version = ${cenm_product_set_version}<br>MT Utils Version = ${mt_utils_version}</b>"
                }
            }
        }

        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkinsfiles/common_methods/CommonMethods.groovy")
                }
            }
        }

        stage('Writing Parameters to parameters.properties') {
            steps {
                script {
                    commonMethods.exportEnvVariablesToFile("parameters.properties")
                }
            }
        }

        stage('Downloading MT Utils Pipeline Scripts') {
            steps {
                script {
                    commonMethods.downloadMtUtils()
                }
            }
        }

        stage('Storing Job Details in Slave') {
            steps {
                script {
                    def node_name = "${SLAVE}"
                    def date = new Date()
                    sh " echo \" NODE_NAME : ${env.NODE_NAME} ; JOB_NAME : ${env.JOB_NAME} ; BUILD_NUMBER : ${env.BUILD_NUMBER} ; $date \" >> \"/home/lciadm100/jenkins/job_details.log\" "
                }
            }
        }

        stage('Execute EMT Pipeline script') {
            steps{
              sh "MTELoopScripts/pipeline_scripts/emt/jenkins/intermediate_build_setup.sh ${WORKSPACE}/parameters.properties initial || exit 1"
            }
        }

        stage('cENM Send Confidence Level') {
            steps {
                setConfidenceLevelToSend('in_progress');
            }
        }

        stage('cENM Send Confidence Level to Build log') {
            steps {
                setConfidenceLevelToSendToBuildLog('in_progress', 'in_progress','update', '', '');
            }
        }

        stage('cENM RFA250') {
            steps {
                script {
                    if (checkJobBuildable("cENM_RFA250")) {
                        Cenm_RFA250 = build(
                                job: "cENM_RFA250",
                                propagate: false,
                                wait: true,
                                parameters: [
                                    string(name: 'cluster_id', value: env.cluster_id),
                                    string(name: 'drop', value: env.drop),
                                    string(name: 'product_set_version', value: env.product_set_version),
                                    string(name: 'cenm_product_set_version', value: env.cenm_product_set_version),
                                    string(name: 'mt_utils_version', value: env.mt_utils_version),
                                    string(name: 'test_phase', value: env.test_phase),
                                    string(name: 'taf_version', value: env.taf_version),
                                    string(name: 'central_csv_version', value: env.central_csv_version),
                                    string(name: 'taf_scheduler_version', value: env.taf_scheduler_version),
                                    string(name: 'send_confidence_level', value: env.send_confidence_level),
                                ]
                            )
                        env.job_link = Cenm_RFA250.absoluteUrl
                        env.console_output_url = sh(script: 'echo "Job Link is: ${job_link}"', returnStdout: true)
                        env.rfa250BuildVariables = Cenm_RFA250.getBuildVariables()
                        env.allureLogUrl = sh(script: 'echo "${rfa250BuildVariables}" | tr "," "\n" | grep "TE_ALLURE_LOG_URL" | xargs | cut -d "=" -f 2', returnStdout: true)
                        if (Cenm_RFA250.result != "SUCCESS") {
                            echo "ERROR : cENM_RFA250 failed. Failing the build!"
                            currentBuild.result = 'FAILURE'
                        }
                    } else {
                        echo "cENM_RFA250 Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('Populate and publish artifact.properties') {
            steps {
                script {
                    if (env.allureLogUrl && allureLogUrl.trim() != "") {
                        sh 'echo "ALLURE_LOG_URL=${allureLogUrl}" >> "${WORKSPACE}/artifact.properties"'
                    } else {
                        sh 'echo "ALLURE_LOG_URL=null" >> "${WORKSPACE}/artifact.properties"'
                    }
                    archiveArtifacts "artifact.properties"
                }
            }
        }
    }

    post {
        success {
            setConfidenceLevelToSend('passed');
            setConfidenceLevelToSendToBuildLog('in_progress', 'passed','update', env.job_link, env.allureLogUrl)
        }
        failure {
            setConfidenceLevelToSend('failed');
            setConfidenceLevelToSendToBuildLog('in_progress', 'failed','update', env.job_link, env.allureLogUrl);
        }
        aborted {
            setConfidenceLevelToSend('failed');
            setConfidenceLevelToSendToBuildLog('in_progress', 'failed','update', '', '');
        }
    }
}

def setConfidenceLevelToSendToBuildLog(overall_status, confidence_level_status, build_action, job_link, allure_link) {
    script {
        if (env.publish_to_buildlog == 'YES') {
            if (checkJobBuildable("cENM_Send_Confidence_Level_To_Build_Log")) {
                def Cenm_Send_Confidence_Level_To_Build_Log = build(
                    job: "cENM_Send_Confidence_Level_To_Build_Log",
                    propagate: false,
                    wait: false,
                    parameters: [
                        string(name: 'drop', value: env.drop),
                        string(name: 'to_ps', value: env.cenm_product_set_version),
                        string(name: 'build_log_action', value: build_action),
                        string(name: 'usecase_status', value: overall_status),
                        string(name: 'deployment', value: env.cluster_id),
                        string(name: 'test_phase', value: 'DROPBACK'),
                        string(name: 'usecase', value: 'cENM-Deploy-UG-CSAR'),
                        string(name: 'confidence_level', value: 'cENM-RFA'),
                        string(name: 'job_link', value: job_link ),
                        string(name: 'allure_link', value: allure_link ),
                        string(name: 'status', value: confidence_level_status),
                        string(name: 'timestamp', value: ''),
                        string(name: 'mt_utils_version', value: env.mt_utils_version)
                    ]
                )
            } else {
                echo "cENM_Send_Confidence_Level_To_Build_Log Job is disabled. So skipping"
            }
        }
    }
}

def setConfidenceLevelToSend(confidence_level_status) {
    script {
        if (env.send_confidence_level == 'YES') {
            if (checkJobBuildable("cENM_Send_Confidence_Level")) {
                def Cenm_Send_Confidence_Level = build(
                    job: "cENM_Send_Confidence_Level",
                    propagate: false,
                    wait: false,
                    parameters: [
                        string(name: 'product_set_version', value: env.cenm_product_set_version),
                        string(name: 'confidence_level_name', value: 'cENM-RFA'),
                        string(name: 'confidence_level_status', value: confidence_level_status),
                        string(name: 'mt_utils_version', value: env.mt_utils_version),
                    ]
                )
            } else {
                echo "cENM_Send_Confidence_Level Job is disabled. So skipping"
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}
