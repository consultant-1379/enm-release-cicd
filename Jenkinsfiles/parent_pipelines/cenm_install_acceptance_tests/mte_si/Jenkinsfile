import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {
        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Acceptance tests on ${cluster_id}"
                    currentBuild.description = "<b>Test Phase = ${test_phase}<br>Product Set Version = ${product_set_version}<br>MT Utils Version = ${mt_utils_version}<br>Taf Version = ${taf_version}</b>"
                }
            }
        }

        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkinsfiles/common_methods/CommonMethods.groovy")
                }
            }
        }

        stage('Writing Parameters to parameters.properties') {
            steps {
                script {
                    commonMethods.exportEnvVariablesToFile("parameters.properties")
                }
            }
        }

        stage('Downloading MT Utils Pipeline Scripts') {
            steps {
                script {
                    commonMethods.downloadMtUtils()
                }
            }
        }

        stage('Storing Job Details in Slave') {
            steps {
                script {
                    def node_name = "${SLAVE}"
                    def date = new Date()
                    sh " echo \" NODE_NAME : ${env.NODE_NAME} ; JOB_NAME : ${env.JOB_NAME} ; BUILD_NUMBER : ${env.BUILD_NUMBER} ; $date \" >> \"/home/lciadm100/jenkins/job_details.log\" "
                }
            }
        }

        stage('Execute EMT Pipeline script') {
            steps{
              sh "MTELoopScripts/pipeline_scripts/emt/jenkins/final_build_setup.sh ${WORKSPACE}/parameters.properties initial || exit 1"
            }
        }

        stage('cENM UI Launcher Link verification') {
            steps {
                script {
                    catchError {
                        if (checkJobBuildable("cENM_UI_Launcher_Link_Verification")) {
                            def Cenm_UI_Launcher_Link_Verification = build(
                                job: "cENM_UI_Launcher_Link_Verification",
                                propagate: true,
                                wait: true,
                                parameters: [
                                    string(name: 'test_phase', value: env.test_phase),
                                    string(name: 'cluster_id', value: env.cluster_id),
                                    string(name: 'drop', value: env.drop),
                                    string(name: 'product_set_version', value: env.product_set_version),
                                    string(name: 'mt_utils_version', value: env.mt_utils_version),
                                    string(name: 'taf_version', value: env.taf_version),
                                ]
                            )
                        } else {
                            echo "cENM_UI_Launcher_Link_Verification Job is disabled. So skipping"
                        }
                    }
                }
            }
        }

        stage('cENM Functional Acceptance Smoke Test') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Functional_Acceptance_Smoke_Test")) {
                        Cenm_Functional_Acceptance_Smoke_Test = build(
                                job: "cENM_Functional_Acceptance_Smoke_Test",
                                propagate: true,
                                wait: true,
                                parameters: [
                                    string(name: 'cluster_id', value: env.cluster_id),
                                    string(name: 'drop', value: env.drop),
                                    string(name: 'product_set_version', value: env.product_set_version),
                                    string(name: 'cenm_product_set_version', value: env.cenm_product_set_version),
                                    string(name: 'mt_utils_version', value: env.mt_utils_version),
                                    string(name: 'test_phase', value: env.test_phase),
                                    string(name: 'taf_version', value: env.taf_version),
                                    string(name: 'central_csv_version', value: env.central_csv_version),
                                    string(name: 'taf_scheduler_version', value: env.taf_scheduler_version),
                                    string(name: 'send_confidence_level', value: env.send_confidence_level),
                                ]
                            )
                        env.cENMFunctionalAcceptanceSmokeTestBuildVariables = Cenm_Functional_Acceptance_Smoke_Test.getBuildVariables()
                        env.allureLogUrl = sh(script: 'echo "${cENMFunctionalAcceptanceSmokeTestBuildVariables}" | tr "," "\n" | grep "TE_ALLURE_LOG_URL" | xargs | cut -d "=" -f 2', returnStdout: true)
                        if (Cenm_Functional_Acceptance_Smoke_Test.result != "SUCCESS") {
                            echo "ERROR : cENM_Functional_Acceptance_Smoke_Test failed. Failing the build!"
                            currentBuild.result = 'FAILURE'
                        }
                    } else {
                        echo "cENM_Functional_Acceptance_Smoke_Test Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('Populate and publish artifact.properties') {
            steps {
                script {
                    if (env.allureLogUrl && allureLogUrl.trim() != "") {
                        sh 'echo "ALLURE_LOG_URL=${allureLogUrl}" >> "${WORKSPACE}/artifact.properties"'
                    } else {
                        sh 'echo "ALLURE_LOG_URL=null" >> "${WORKSPACE}/artifact.properties"'
                    }
                    archiveArtifacts "artifact.properties"
                }
            }
        }
    }

    post {
        success {
            setConfidenceLevelToSend('passed')
        }
        failure {
            setConfidenceLevelToSend('failed');
        }
        aborted {
            setConfidenceLevelToSend('failed');
        }
        always {
            script {
                sh "MTELoopScripts/pipeline_scripts/emt/jenkins/final_build_setup.sh ${WORKSPACE}/parameters.properties post_build || exit 1"
            }
        }
    }
}

def setConfidenceLevelToSend(confidence_level_status) {
    script {
        if (env.send_confidence_level == 'YES') {
            if (checkJobBuildable("cENM_Send_Confidence_Level")) {
                def Cenm_Send_Confidence_Level = build(
                    job: "cENM_Send_Confidence_Level",
                    propagate: false,
                    wait: false,
                    parameters: [
                        string(name: 'product_set_version', value: env.cenm_product_set_version),
                        string(name: 'confidence_level_name', value: 'cENM-Deploy-II-Charts-SI'),
                        string(name: 'confidence_level_status', value: confidence_level_status),
                        string(name: 'mt_utils_version', value: env.mt_utils_version),
                    ]
                )
            } else {
                echo "cENM_Send_Confidence_Level Job is disabled. So skipping"
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}
