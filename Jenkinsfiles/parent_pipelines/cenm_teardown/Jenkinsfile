import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {
        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Initial UnInstall on ${cluster_id}"
                }
            }
        }

        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkinsfiles/common_methods/CommonMethods.groovy")
                }
            }
        }

        stage('Writing Parameters to parameters.properties') {
            steps {
                script {
                    commonMethods.exportEnvVariablesToFile("parameters.properties")
                }
            }
        }

        stage('Downloading MT Utils Pipeline Scripts') {
            steps {
                script {
                    commonMethods.downloadMtUtils()
                }
            }
        }

        stage('Storing Job Details in Slave') {
            steps {
                script {
                    def node_name = "${SLAVE}"
                    def date = new Date()
                    sh " echo \" NODE_NAME : ${env.NODE_NAME} ; JOB_NAME : ${env.JOB_NAME} ; BUILD_NUMBER : ${env.BUILD_NUMBER} ; $date \" >> \"/home/lciadm100/jenkins/job_details.log\" "
                }
            }
        }

        stage('Execute EMT Pipeline script') {
            steps{
              sh "MTELoopScripts/pipeline_scripts/emt/jenkins/initial_build_setup.sh ${WORKSPACE}/parameters.properties initial || exit 1"
            }
        }

        stage('cENM Remove Workload Profiles') {
            steps {
                script {
                    if (env.test_phase == 'MTE' && env.trigger_non_functional_flow == 'True') {
                        if (checkJobBuildable("cENM_Remove_Profiles")) {
                            def CENM_Remove_Profiles = build(
                                job: "cENM_Remove_Profiles",
                                propagate: true,
                                wait: true,
                                parameters: [
                                    string(name: 'cluster_id', value: env.cluster_id),
                                    string(name: 'mt_utils_version', value: env.mt_utils_version),
                                    string(name: 'remove_profiles_only', value: env.remove_profiles_only)
                                ]
                            )
                        } else {
                            echo "cENM_Remove_Profiles Job is disabled. So skipping"
                        }
                    }
                }
            }
        }

        stage('Spinoff cENM Remove Workload Profiles ') {
            steps {
                script {
                    if (env.test_phase == 'DROPBACK' && env.trigger_non_functional_flow == 'True') {
                        if (checkJobBuildable("cENM_Remove_Profiles")) {
                            def CENM_Remove_Profiles = build(
                                job: "cENM_Remove_Profiles",
                                propagate: true,
                                wait: true,
                                parameters: [
                                    string(name: 'cluster_id', value: env.cluster_id),
                                    string(name: 'mt_utils_version', value: env.mt_utils_version),
                                    string(name: 'remove_profiles_only', value: env.remove_profiles_only)
                                ]
                            )
                        } else {
                            echo "cENM_Remove_Profiles Job is disabled. So skipping"
                        }
                    }
                }
            }
        }

        stage('cENM Initial UnInstall') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Initial_UnInstall")) {
                        def CENM_Initial_UnInstall = build(
                            job: "cENM_Initial_UnInstall",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'environment_name', value: env.cluster_id),
                            ]
                        )
                    } else {
                        echo "cENM_Initial_UnInstall Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Clean Up Unsed Docker Images from Worker Node') {
            steps {
                script {
                    if (env.test_phase == 'MTE') {
                        if (checkJobBuildable("cENM_Cleanup_Unused_Docker_Images_From_WorkerNodes")) {
                            def CENM_Cleanup_Docker_images = build(
                                job: "cENM_Cleanup_Unused_Docker_Images_From_WorkerNodes",
                                propagate: true,
                                wait: true,
                                parameters: [
                                    string(name: 'cluster_id', value: env.cluster_id),
                                    string(name: 'mt_utils_version', value: env.mt_utils_version),
                                    string(name: 'test_phase', value: env.test_phase)
                                ]
                            )
                        } else {
                            echo "cENM_Cleanup_Unused_Docker_Images_From_WorkerNodes Job is disabled. So skipping"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh "MTELoopScripts/pipeline_scripts/emt/jenkins/initial_build_setup.sh ${WORKSPACE}/parameters.properties post_build || exit 1"
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}
