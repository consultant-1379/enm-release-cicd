import jenkins.model.*

pipeline {

    agent {
        node {
            label SLAVE
        }
    }

    options {
        timestamps()
    }

    stages {
        stage('Set build name and description') {
            steps {
                script {
                    currentBuild.displayName = "Network and Workload Setup on ${cluster_id}"
                    currentBuild.description = "<b>MT Utils Version = ${mt_utils_version}<br>Add Nodes To ENM = ${nodes_to_add_to_enm}<br>Add Nodes To Workpool = ${nodes_to_add_to_workpool}<br>Workload Profiles = ${workload_profiles}</b>"
                }
            }
        }

        stage('cENM Fetch Network') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Fetch_Network")) {
                        def Cenm_Fetch_Network = build(
                            job: "cENM_Fetch_Network",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'product_set_version', value: env.product_set_version),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'force_arne_xml_creation', value: env.force_arne_xml_creation),
                            ]
                        )
                    } else {
                        echo "cENM_Fetch_Network Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Add Network') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Add_Network")) {
                        def Cenm_Add_Network = build(
                            job: "cENM_Add_Network",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'nodes_to_add_to_enm', value: env.nodes_to_add_to_enm),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'drop', value: env.drop),
                            ]
                        )
                    } else {
                        echo "cENM_Add_Network Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Manage And Supervise Network') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Manage_And_Supervise_Network")) {
                        def Cenm_Manage_And_Supervise_Network = build(
                            job: "cENM_Manage_And_Supervise_Network",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'supervision_types', value: env.supervision_types),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'test_phase', value: env.test_phase),
                            ]
                        )
                    } else {
                        echo "cENM_Manage_And_Supervise_Network Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Manage PM Function') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Manage_PM_Function")) {
                        def Cenm_Manage_PM_Function = build(
                            job: "cENM_Manage_PM_Function",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'supervision_types', value: env.supervision_types),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                            ]
                        )
                    } else {
                        echo "cENM_Manage_PM_Function Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Add Nodes To Workload Pool') {
            steps {
                script {
                    if (checkJobBuildable("Cenm_Add_Nodes_To_Workload_Pool")) {
                        def Cenm_Add_Nodes_To_Workload_Pool = build(
                            job: "Cenm_Add_Nodes_To_Workload_Pool",
                            propagate: true,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'nodes_to_add_to_workpool', value: env.nodes_to_add_to_workpool),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                            ]
                        )
                    } else {
                        echo "Cenm_Add_Nodes_To_Workload_Pool Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Apply Priority 1 Workload') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Apply_Priority_1_Workload")) {
                        def Cenm_Apply_Priority_1_Workload = build(
                            job: "cENM_Apply_Priority_1_Workload",
                            propagate: false,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'workload_profiles', value: env.workload_profiles),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'test_phase', value: env.test_phase),
                            ]
                        )
                    } else {
                        echo "cENM_Apply_Priority_1_Workload Job is disabled. So skipping"
                    }
                }
            }
        }

        stage('cENM Apply Priority 2 Workload') {
            steps {
                script {
                    if (checkJobBuildable("cENM_Apply_Priority_2_Workload")) {
                        def Cenm_Apply_Priority_2_Workload = build(
                            job: "cENM_Apply_Priority_2_Workload",
                            propagate: false,
                            wait: true,
                            parameters: [
                                string(name: 'cluster_id', value: env.cluster_id),
                                string(name: 'workload_profiles', value: env.workload_profiles),
                                string(name: 'mt_utils_version', value: env.mt_utils_version),
                                string(name: 'test_phase', value: env.test_phase),
                            ]
                        )
                    } else {
                        echo "cENM_Apply_Priority_2_Workload Job is disabled. So skipping"
                    }
                }
            }
        }
    }
}

def checkJobBuildable(jobName) {
    def isBuildable = Jenkins.instance.getItem(jobName).isBuildable();
    return isBuildable
}